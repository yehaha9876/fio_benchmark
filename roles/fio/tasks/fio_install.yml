---
# do check
- name: Yum clean metadata
  command: yum clean metadata
  args:
    warn: no
  register: clean_yum
  ignore_errors: True

- name: Check fio present
  yum:
    list: fio
    skip_broken: true
  register: fio_system_yum_result

# get fio status
- name: Get fio status self
  set_fact: 
     fio_status: "self"
  when: fio_system_yum_result.results | length > 0 

- name: Get fio status url
  set_fact: 
     fio_status: "url"
  when: 
    - fio_system_yum_result.results | length == 0 
    - yum.use_url_or_rpm == 'url'

- name: Get fio status rpm
  set_fact: 
     fio_status: "rpm"
  when: 
    - fio_system_yum_result.results | length == 0 
    - fio_status is undefined

- name: show type
  debug:
    msg: "fio_status: {{ fio_status }}"

# befor install repare
- name: Add yum repo
  yum_repository:
    name: iso_with_fio
    description: base iso repo
    file: iso_with_fio
    baseurl: "{{ yum.repo_url }}"
    gpgcheck: no
    enabled: yes
  when:  fio_status == "url"

- name: Create tmp dir
  file:
    path: "/tmp/fio_rpms"
    state: directory
  when:  fio_status == "rpm"

- name: Copy rpm
  unarchive: 
    src: "{{ yum.pak_name }}"
    dest: "/tmp/fio_rpms/"
    keep_newer: yes
  when:  fio_status == "rpm"

# install foi
- name: Install fio yum
  yum:
    name: fio
    state: present
  when: fio_status != "rpm"

- name: find rpm files and register the result 
  find:
    paths: /tmp/fio_rpms/
    patterns: "*.rpm"
  register: rpm_files
  when: fio_status == "rpm"

- set_fact:
    rpm_list: "{{ rpm_files.files | map(attribute='path') | list}}"
  when: fio_status == "rpm"

- name: Install fio rpm
  yum:
    name: "{{ rpm_list }}"
    state: present
  when: fio_status == "rpm"

# clean
- name: Remove repository and clean up
  yum_repository:
    name: iso_with_fio
    state: absent
  when: fio_status == "url"

- name: Remove rpms
  file:
    path: "/tmp/fio_rpms"
    state: absent
  when: fio_status == "rpm"
